{"version":3,"sources":["utils/web3.ts","contexts/Localisation/translationsContext.ts","state/hooks.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","utils/addressHelpers.ts","config/constants/types.ts","utils/multicall.ts","config/constants/contracts.ts","config/constants/pools.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts"],"names":["RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","getContract","abi","address","contractOptions","eth","Contract","defaultTranslationState","translations","setTranslations","TranslationsContext","createContext","ZERO","BigNumber","useFetchPublicData","dispatch","useDispatch","slowRefresh","useRefresh","useEffect","fetchFarmsPublicDataAsync","useFarms","useSelector","state","farms","data","useFarmFromPid","pid","find","f","useFarmUser","farm","allowance","userData","tokenBalance","stakedBalance","earnings","usePriceBnbBusd","tokenPriceVsQuote","usePriceCakeBusd","usePriceBeeBusd","bnbPriceUSD","console","log","times","useTotalValue","bnbPrice","cakePrice","value","i","length","lpTotalInQuoteToken","val","quoteTokenSymbol","QuoteToken","BNB","CAKE","plus","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","div","pow","tokenSymbol","BUSD","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","hnycmbPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","account","masterChefAdress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","action","liveFarmsData","payload","liveFarmData","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","actions","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","variableRegex","getTranslation","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","Container","styled","theme","mediaQueries","sm","Page","lg","getCakeAddress","addresses","cake","chainId","getBeeAddress","bee","masterChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","PoolCategory","web3","multi","MultiCallAbi","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","56","97","busd","pools","GlobalStyle","createGlobalStyle","isDark","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","filter","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","concat","Menu","props","useWallet","connect","reset","cakePriceUsd","beePriceUsd","login","logout","currentLang","langs","setLang","links","beePriceLink","priceLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","useRef","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","Home","lazy","SwapV2","LiquidityV2","SwapV1","LiquidityV1","Farms","RoadMap","WhitePaper","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","block","setBlock","getBlockNumber","blockNumber","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","nonBnbPools","poolsConfig","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingHny","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts"],"mappings":"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","file":"static/js/main.cc1d4a57.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // HNY-BUSD LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const usePriceBeeBusd = (): BigNumber => {\n  const bnbPriceUSD = usePriceBnbBusd()\n  console.log(bnbPriceUSD)\n  const pid = 3 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, hnycmbPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'hnycmbPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        hnycmbPerBlock: new BigNumber(hnycmbPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingHny',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getBeeAddress = () => {\n  return addresses.bee[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","export default {\n  cake: {\n    56: '0x97212bAb58ea9562f4208B9c344212b96aFA7a1B',\n    97: '',\n  },\n  bee: {\n    56: '0xa427ab59ee9e4c6a65401fe689991ad93e42b51a',\n    97: '',\n  },\n  masterChef: {\n    56: '0x847bC6D00Df9e9D00030E1267f30BaeD48B7cC4c',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from 'beez-uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-image: ${({ theme }) => (theme.isDark ? 'url(/images/dark-bg.jpg)' : 'url(/images/light-bg.jpg)' )};\n    background-repeat: no-repeat;\n    background-image: fit;\n    background-size: fit;\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from 'beez-uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from 'beez-uikit'\nimport { getCakeAddress, getBeeAddress } from 'utils/addressHelpers'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange HNYCMB',\n        href: '/v2swap',\n      },\n      {\n        label: 'HNYCMB Liquidity',\n        href: '/v2liquidity',\n      },\n      {\n        label: 'Exchange BEEZ',\n        href: '/v1swap',\n      },\n      {\n        label: 'Liquidity: BEEZ',\n        href: '/v1liquidity',\n      },\n    ],\n  },\n  {\n    label: 'Honeycomb Farms',\n    icon: 'FarmIcon',\n    href: '/Honeycomb',\n  },\n  {\n    label: 'Honeycomb Pools',\n    icon: 'PoolIcon',\n    href: '/nests',\n  },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'HNYCMB on PancakeSwap',\n        href: 'https://pancakeswap.info/token/'.concat(getCakeAddress()),\n      },\n      {\n        label: 'BEEZ on PancakeSwap',\n        href: 'https://pancakeswap.info/token/'.concat(getBeeAddress()),\n      },\n      /* {\n        label: 'CoinGecko',\n        href: 'https://www.coingecko.com/en/e',\n      },\n      {\n        label: 'CoinMarketCap',\n        href: 'https://coinmarketc',\n      },\n      {\n        label: 'AstroTools',\n        href: 'https://app.astrotools.io/pancake-pair-explorer/0x19e7cbecdd23a16dfa5573df54d98f7caae03019',\n      }, */\n    ],\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Roadmap',\n        href: '/Roadmap',\n      },\n      {\n        label: 'Whitepaper',\n        href: '/Whitepaper',\n      },\n    ],\n  }, \n /*  {\n    label: 'Partnership?',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Apply Here',\n        href: 'https://github.com/goosedefi/',\n      },\n      {\n        label: 'Info',\n        href: 'https://github.com/goosedefi/',\n      },\n    ],\n  }, */\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd, usePriceBeeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from 'beez-uikit'\nimport config from './config'\nimport { getCakeAddress, getBeeAddress } from '../../utils/addressHelpers'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n  const beePriceUsd = usePriceBeeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      beePriceUsd={beePriceUsd.toNumber() * 1e9}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      beePriceLink={ \"https://poocoin.app/tokens/\".concat( getBeeAddress() ) }\n      priceLink={ \"https://poocoin.app/tokens/\".concat( getCakeAddress() ) }\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from 'beez-uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import { Nft } from './types'\n\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Swapsies',\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\n    previewImage: 'swapsies-preview.png',\n    blurImage: 'swapsies-blur.png',\n    sortOrder: 999,\n    bunnyId: 0,\n  },\n  {\n    name: 'Drizzle',\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\n    previewImage: 'drizzle-preview.png',\n    blurImage: 'drizzle-blur.png',\n    sortOrder: 999,\n    bunnyId: 1,\n  },\n  {\n    name: 'Blueberries',\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\n    previewImage: 'blueberries-preview.png',\n    blurImage: 'blueberries-blur.png',\n    sortOrder: 999,\n    bunnyId: 2,\n  },\n  {\n    name: 'Circular',\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\n    previewImage: 'circular-preview.png',\n    blurImage: 'circular-blur.png',\n    sortOrder: 999,\n    bunnyId: 3,\n  },\n  {\n    name: 'Sparkle',\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\n    previewImage: 'sparkle-preview.png',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 4,\n  },\n]\n\nexport default Nfts\n","import React, { useEffect, useRef } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Heading, Modal, useModal } from 'beez-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\n\ninterface NftYouWonModalProps {\n  onDismiss?: () => void\n}\n\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`\n\nconst Actions = styled.div`\n  text-align: center;\n`\n\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n  return (\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\n      <ModalContent>\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\n        <Heading size=\"lg\" color=\"secondary\">\n          {TranslateString(999, 'You won an NFT!')}\n        </Heading>\n      </ModalContent>\n      <Actions>\n        <Button as=\"a\" href=\"/nft\">\n          {TranslateString(999, 'Go to claim NFT')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\n/**\n * 1. Checks if nft supply available\n * 2. If supply is available check if the user can claim\n * 3. If the user can claim show a modal\n */\nconst NftGlobalNotification = () => {\n  const { account } = useWallet()\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\n  const showModal = useRef(() => onPresentBurnModal())\n\n  useEffect(() => {\n    const checkNftStatus = async () => {\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\n        rabbitmintingfarm,\n        [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n        ],\n      )\n\n      // TODO: Figure out why these values are coming back as an array\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n      const [canClaim]: [boolean] = canClaimArr\n      const [hasClaimed]: [boolean] = hasClaimedArr\n\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\n        showModal.current()\n      }\n    }\n\n    if (account && !document.location.href.includes('/nft')) {\n      checkNftStatus()\n    }\n  }, [account, showModal])\n\n  return <div />\n}\n\nexport default NftGlobalNotification\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'beez-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst SwapV2 = lazy(() => import('./views/v2swap'))\nconst LiquidityV2 = lazy(() => import('./views/v2liquidity'))\nconst SwapV1 = lazy(() => import('./views/v1swap'))\nconst LiquidityV1 = lazy(() => import('./views/v1liquidity'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst RoadMap = lazy(() => import('./views/roadmap'))\nconst WhitePaper = lazy(() => import('./views/whitepaper'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/Home'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/v2swap\">\n              <SwapV2 />\n              </Route>\n            <Route path=\"/v2Liquidity\">\n              <LiquidityV2 />\n            </Route>\n            <Route path=\"/v1swap\">\n              <SwapV1 />\n              </Route>\n            <Route path=\"/v1Liquidity\">\n              <LiquidityV1 />\n            </Route>\n            <Route path=\"/Honeycomb\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode/>\n            </Route>\n            <Route path=\"/roadmap\">\n              <RoadMap />\n            </Route>\n            <Route path=\"/whitepaper\">\n              <WhitePaper />\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      <NftGlobalNotification />\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from 'beez-uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingHny('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 5,\n    risk: 0,\n    lpSymbol: 'HNY-BEEZ LP (V2)',\n    lpAddresses: {\n      97: '',\n      56: '0xE7D73Ba4631653173d015D2C7b1B85E6689eda6B',\n    },\n    tokenSymbol: 'HNY',\n    tokenAddresses: {\n      97: '',\n      56: '0x97212bAb58ea9562f4208B9c344212b96aFA7a1B',\n    },\n    quoteTokenSymbol: QuoteToken.CAKE,\n    quoteTokenAdresses: contracts.cake,\n  },\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'HNY-BUSD LP (V2)',\n    lpAddresses: {\n      97: '',\n      56: '0xA51B1d6396bb75953E9433af9Aa2D9cd3A3856b8',\n    },\n    tokenSymbol: 'HNY',\n    tokenAddresses: {\n      97: '',\n      56: '0x97212bAb58ea9562f4208B9c344212b96aFA7a1B',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'HNY-BNB LP(V2)',\n    lpAddresses: {\n      97: '',\n      56: '0x970Db044f9397daA088DC94686438e12514fC85E',\n    },\n    tokenSymbol: 'HNY',\n    tokenAddresses: {\n      97: '',\n      56: '0x97212bAb58ea9562f4208B9c344212b96aFA7a1B',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP(V1)',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 6,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP(V2)',\n    lpAddresses: {\n      97: '',\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 3,\n    lpSymbol: 'BEEZ-BNB LP(V1)',\n    lpAddresses: {\n      97: '',\n      56: '0xaaBCEB7549A4F476A28ad36d08D6051190CEf7a2',\n    },\n    tokenSymbol: 'BEEZ',\n    tokenAddresses: {\n      97: '',\n      56: '0xa427ab59ee9e4c6a65401fe689991ad93e42b51a',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'HNY (V2)',\n    lpAddresses: {\n      97: '',\n      56: '0x97212bAb58ea9562f4208B9c344212b96aFA7a1B', // AUTO-BNB LP\n    },\n    tokenSymbol: 'HNY',\n    tokenAddresses: {\n      97: '',\n      56: '0x97212bAb58ea9562f4208B9c344212b96aFA7a1B',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  /* {\n    pid: 3,\n    risk: 5,\n    lpSymbol: 'BEEZ-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xaaBCEB7549A4F476A28ad36d08D6051190CEf7a2',\n    },\n    tokenSymbol: 'BEEZ',\n    tokenAddresses: {\n      97: '',\n      56: '0xa427ab59ee9e4c6a65401fe689991ad93e42b51a',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  }, */\n]\n\nexport default farms\n"],"sourceRoot":""}